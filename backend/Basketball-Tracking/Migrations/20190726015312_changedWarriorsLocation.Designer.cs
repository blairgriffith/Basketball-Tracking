// <auto-generated />
using BasketballTracking;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BasketballTracking.Migrations
{
    [DbContext(typeof(SiteContext))]
    [Migration("20190726015312_changedWarriorsLocation")]
    partial class changedWarriorsLocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BasketballTracking.Models.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURL");

                    b.Property<string>("Name");

                    b.HasKey("ConferenceId");

                    b.ToTable("Conferences");

                    b.HasData(
                        new { ConferenceId = 1, ImageURL = "https://vignette.wikia.nocookie.net/prosportsteams/images/f/ff/Eastern_Conference_%28NBA%29.gif/revision/latest?cb=20120914185141", Name = "Eastern Conference" },
                        new { ConferenceId = 2, ImageURL = "https://vignette.wikia.nocookie.net/prosportsteams/images/1/10/Western_Conference_%28NBA%29.gif/revision/latest?cb=20120914191716", Name = "Western Conference" }
                    );
                });

            modelBuilder.Entity("BasketballTracking.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURL");

                    b.Property<string>("Name");

                    b.Property<int>("TeamId");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new { PlayerId = 1, ImageURL = "https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/2544.png", Name = "LeBron James", TeamId = 4 },
                        new { PlayerId = 2, ImageURL = "https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/201939.png", Name = "Stephen Curry", TeamId = 5 },
                        new { PlayerId = 3, ImageURL = "https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/202689.png", Name = "Kemba Walker", TeamId = 3 },
                        new { PlayerId = 4, ImageURL = "https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/203507.png", Name = "Giannis Antetokounmpo", TeamId = 2 },
                        new { PlayerId = 5, ImageURL = "https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/201567.png", Name = "Kevin Love", TeamId = 1 }
                    );
                });

            modelBuilder.Entity("BasketballTracking.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConferenceId");

                    b.Property<string>("ImageURL");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.HasKey("TeamId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Teams");

                    b.HasData(
                        new { TeamId = 1, ConferenceId = 1, ImageURL = "https://stats.nba.com/media/img/teams/logos/CLE_logo.svg", Location = "Cleveland", Name = "Cavaliers" },
                        new { TeamId = 2, ConferenceId = 1, ImageURL = "https://stats.nba.com/media/img/teams/logos/MIL_logo.svg", Location = "Milwaukee", Name = "Bucks" },
                        new { TeamId = 3, ConferenceId = 1, ImageURL = "https://stats.nba.com/media/img/teams/logos/BOS_logo.svg", Location = "Boston", Name = "Celtics" },
                        new { TeamId = 4, ConferenceId = 2, ImageURL = "https://stats.nba.com/media/img/teams/logos/LAL_logo.svg", Location = "Los Angeles", Name = "Lakers" },
                        new { TeamId = 5, ConferenceId = 2, ImageURL = "https://stats.nba.com/media/img/teams/logos/GSW_logo.svg", Location = "Golden State", Name = "Warriors" }
                    );
                });

            modelBuilder.Entity("BasketballTracking.Models.Player", b =>
                {
                    b.HasOne("BasketballTracking.Models.Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BasketballTracking.Models.Team", b =>
                {
                    b.HasOne("BasketballTracking.Models.Conference")
                        .WithMany("Teams")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
